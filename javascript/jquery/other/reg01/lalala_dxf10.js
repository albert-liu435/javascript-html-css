//匹配qq号
//要求：不能以数字0开始，只能由数字组成，长度为5-11位
var reg = /^[1-9]\d{4,10}$/;
var str1 = "12311111111";
var result1 = reg.test(str1); //true
console.log(result1);

//匹配身份证号
//要求：不能以数字0开头，只能由数字组成，最后一位可能是x，X，长度为18位
var reg = /^[1-9]\d{16}[xX\d]$/;
var str = "456337189654326541";
var result = reg.test(str); //true
console.log(result);

//验证是否为11位有效手机号码
//要求：以1开头，第二位为3，4，5，7，8中的任意一位，其他位为0~9的整数。
var reg = /^1(3|4|5|7|8)\d{9}$/;
var str = "13543211239";
var result = reg.test(str);
console.log(result); //true

//密码验证
//要求:必须包含字母大写，小写,数字,和特殊字符(!,@,#,%,&),且大于6位
var reg = /^(?=.*\d)(?=.*[a-zA-Z])(?=.*[@#$%&])[\da-zA-Z@#$%&]{6,}$/;
var str = "&Fan1234";
var result = reg.test(str);
console.log(result) //true

// 解释：
// 这里主要用到了js正则表式中的正向前瞻 ?=，举个例子
// /\d/.exec( 'abc2abc' ) 匹配结果为2，释义：匹配一个数字
// /\d(?=a)/.exec( 'abc2abc' ) 匹配结果为2，释义：匹配一个数字，但是这个数字后面必须跟着字母a
// /\d(?=a)/.exec( 'abc2bc' ) 匹配结果为null
// 由此可以看出，?= 匹配结果中不包含它所匹配的字符，但是待匹配字符串必须符合它所对应的规则
// 当有多个正向前瞻规则时它们是并列的，不是串行的，比如/\d(?=a)(?=b)/.exec( 'abc2abc' ) 匹配结果为null，
// 那如果想匹配一个数字，后面必须跟着字母a和b，可以这样写，/\d(?=a)(?=.b)/.exec( 'abc2abc' )，当然这是为了演示它的规则，其实可以这样写/\d(?=ab)/.exec( 'abc2abc' )
// ————————————————
// 版权声明：本文为CSDN博主「持久的棒棒君」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
// 原文链接：https://blog.csdn.net/lalala_dxf/article/details/124098349

// (?=.*?[a-z])(?=.*?[A-Z]).+ 这段正则表达式规定了匹配的字符串中必须包含至少一个大写和小写的字母

// <((?!p).+)><\/\1>这段表达式规定了匹配除< p>或< /p>之外的所有标签

// ^\d+\.[\d]+$匹配所有小数